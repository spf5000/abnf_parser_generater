idl = ws control-section metadata-section shape-section ; test
ws = *(sp / newline / comment) ; whitespace
sp = *(%x20  / %x09) ; " " and \t
br = sp (comment / newline) sp ; break
newline = %x0A / %x0D.0A ; \n and \r\n
comment = documentation-comment / comment
documentation-comment = "///" *not-newline br
line-comment = "//" *not-newline newline
not-newline = %x09 / %x20-10FFFF ; Any character except newline
control-section = *(control-statement)
control-statement = "$" ws node-object-key ws ":" ws node-value br
metadata-section = *(metadata-statement)
metadata-statement = "metadata" ws node-object-key ws "=" ws node-value br
node-value = node-array / node-object / number / node-keyword / node-string-value
node-array = empty-node-array / populated-node-array
empty-node-array = "[" ws "]"
populated-node-array = "[" ws node-value ws *(comma node-value ws) trailing-comma "]"
trailing-comma = [comma]
comma = "," ws
node-object = empty-node-object / populated-node-object
empty-node-object = "{" ws "}"
populated-node-object = "{" ws node-object-kvp ws *(comma node-object-kvp ws) trailing-comma "}"
node-object-kvp = node-object-key ws ":" ws node-value
node-object-key = quoted-text / identifier
number = [minus] int [frac] [exp]
decimal-point = %x2E ; .
digit1-9 = %x31-39 ; 1-9
e = %x65 / %x45 ; e E
exp = e [minus / plus] 1*DIGIT
frac = decimal-point 1*DIGIT
int = zero / (digit1-9 *DIGIT)
minus = %x2D ; -
plus = %x2B ; +
zero = %x30 ; 0
node-keywords = "true" / "false" / "null"
node-string-value = shape-id / text-block / quoted-text
quoted-text = DQUOTE *quoted-char DQUOTE
quoted-char = %x20-21 / %x23-5B  / %x5D-10FFFF / escaped-char / preserved-double
escaped-char = escape (escape / "'" / DQUOTE / "b" / "f" / "n" / "r" / "t" / "/" / unicode-escape)
unicode-escape = "u" hex hex hex hex
hex = DIGIT / %x41-46 / %x61-66
preserved-double = escape (%x20-21 / %x23-5B / %x5D-10FFFF)
escape = %x5C ; backslash
text-block = three-dquotes br *quoted-char three-dquotes
three-dquotes = DQUOTE DQUOTE DQUOTE
shape-section = [namespace-statement [use-section] [shape-statements]]
namespace-statement = "namespace" ws namespace br
use-section = *(use-statement)
use-statement = "use" ws absolute-root-shape-id br
shape-statements = *(shape-statement / apply-statement)
shape-statement = trait-statements shape-body br
shape-body = simple-shape-statement / list-statement / set-statement / map-statement / structure-statement / union-statement / service-statement / operation-statement / resource-statement
simple-shape-statement = simple-type-name ws identifier
simple-type-name = "blob" / "boolean" / "document" / "string" / "byte" / "short" / "integer" / "long" / "float" / "double" / "bigInteger" / "bigDecimal" / "timestamp"
shape-members = empty-shape-members / populated-shape-members
empty-shape-members = "{" ws "}"
populated-shape-members = "{" ws shape-member-kvp *(comma shape-member-kvp ws) trailing-comma "}"
shape-member-kvp = trait-statements identifier ws ":" ws shape-id
list-statement = "list" ws identifier ws shape-members
set-statement = "set" ws identifier ws shape-members
map-statement = "map" ws identifier ws shape-members
structure-statement = "structure" ws identifier ws shape-members
union-statement = "union" ws identifier ws shape-members
service-statement = "service" ws identifier ws node-object
operation-statement = "operation" ws identifier ws node-object
resource-statement = "resource" ws identifier ws node-object
trait-statements = *(ws trait) ws
trait = "@" shape-id [trait-body]
trait-body = "(" ws trait-body-value ws ")"
trait-body-value = trait-structure / node-value
trait-structure = trait-structure-kvp *(ws comma trait-structure-kvp)
trait-structure-kvp = node-object-key ws ":" ws node-value
apply-statement = "apply" ws shape-id ws trait br

